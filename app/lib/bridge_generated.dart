// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class Reversi {
  Future<SearchResult> searchGameTree(
      {required Int32List squares,
      required int turnDepth,
      required int color,
      required int searchDepth,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSearchGameTreeConstMeta;
}

class Action {
  final int color;
  final int row;
  final int col;
  final bool isPass;

  Action({
    required this.color,
    required this.row,
    required this.col,
    required this.isPass,
  });
}

class SearchResult {
  final int value;
  final Action action;

  SearchResult({
    required this.value,
    required this.action,
  });
}

class ReversiImpl extends FlutterRustBridgeBase<ReversiWire>
    implements Reversi {
  factory ReversiImpl(ffi.DynamicLibrary dylib) =>
      ReversiImpl.raw(ReversiWire(dylib));

  ReversiImpl.raw(ReversiWire inner) : super(inner);

  Future<SearchResult> searchGameTree(
          {required Int32List squares,
          required int turnDepth,
          required int color,
          required int searchDepth,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_search_game_tree(
            port_,
            _api2wire_int_32_list(squares),
            _api2wire_i32(turnDepth),
            _api2wire_i32(color),
            _api2wire_i32(searchDepth)),
        parseSuccessData: _wire2api_search_result,
        constMeta: kSearchGameTreeConstMeta,
        argValues: [squares, turnDepth, color, searchDepth],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSearchGameTreeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "search_game_tree",
        argNames: ["squares", "turnDepth", "color", "searchDepth"],
      );

  // Section: api2wire
  int _api2wire_i32(int raw) {
    return raw;
  }

  ffi.Pointer<wire_int_32_list> _api2wire_int_32_list(Int32List raw) {
    final ans = inner.new_int_32_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
Action _wire2api_action(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 4)
    throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
  return Action(
    color: _wire2api_i32(arr[0]),
    row: _wire2api_i32(arr[1]),
    col: _wire2api_i32(arr[2]),
    isPass: _wire2api_bool(arr[3]),
  );
}

bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

Action _wire2api_box_action(dynamic raw) {
  return _wire2api_action(raw);
}

int _wire2api_i32(dynamic raw) {
  return raw as int;
}

SearchResult _wire2api_search_result(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return SearchResult(
    value: _wire2api_i32(arr[0]),
    action: _wire2api_box_action(arr[1]),
  );
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class ReversiWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ReversiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ReversiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_search_game_tree(
    int port_,
    ffi.Pointer<wire_int_32_list> squares,
    int turn_depth,
    int color,
    int search_depth,
  ) {
    return _wire_search_game_tree(
      port_,
      squares,
      turn_depth,
      color,
      search_depth,
    );
  }

  late final _wire_search_game_treePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_int_32_list>, ffi.Int32,
              ffi.Int32, ffi.Int32)>>('wire_search_game_tree');
  late final _wire_search_game_tree = _wire_search_game_treePtr.asFunction<
      void Function(int, ffi.Pointer<wire_int_32_list>, int, int, int)>();

  ffi.Pointer<wire_int_32_list> new_int_32_list_0(
    int len,
  ) {
    return _new_int_32_list_0(
      len,
    );
  }

  late final _new_int_32_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_int_32_list> Function(
              ffi.Int32)>>('new_int_32_list_0');
  late final _new_int_32_list_0 = _new_int_32_list_0Ptr
      .asFunction<ffi.Pointer<wire_int_32_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_int_32_list extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;

const int BOARD_SIZE = 8;
